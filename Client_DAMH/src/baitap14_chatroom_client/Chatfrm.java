/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package baitap14_chatroom_client;

/**
 *
 * @author sheam
 */
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKey;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
public class Chatfrm extends javax.swing.JFrame implements ActionListener{
        
    private static final long serialVersionUID = 1L;
	public static int chattingRoom = -1;
        JList<String> connectedServerInfoJList;
        private SecretKey key;
//	JList<String> onlineUserJList;
//	JList<String> groupJList;
//
//	JList<String> roomUsersJList;
        
        List<RoomMessagesPanel> roomMessagesPanels;
        
    /**
     * Creates new form Chatfrm
     */
    public Chatfrm() {
//        connectedServerInfoJList = new JList<String>(new String[] { "IP: " + Main.socketController.connectedServer.ip,
//				"Port: " + Main.socketController.connectedServer.port,
//				"Số user online: " + Main.socketController.connectedServer.connectAccountCount });
        
       
        
        initComponents();
        //set and generate key
//        try {
//            key = CryptoUtils.generateKey();
//            
//        } catch (Exception ex) {
//            Logger.getLogger(Chatfrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        KeyManager.getInstance().setKey(key);
        jLabel1.setText("IP: " + Main.socketController.connectedServer.ip);
        jLabel2.setText("Port: " +Main.socketController.connectedServer.port );
        jLabel3.setText("Số user online: "+ Main.socketController.connectedServer.connectAccountCount); 
        groupListScrollPane.setBorder(BorderFactory.createTitledBorder("Danh sách group"));
        InputMap input = messageArea.getInputMap();
		input.put(KeyStroke.getKeyStroke("shift ENTER"), "insert-break");
		input.put(KeyStroke.getKeyStroke("ENTER"), "text-submit");
		messageArea.getActionMap().put("text-submit", new AbstractAction() {
			private static final long serialVersionUID = 1L;

			@Override
			public void actionPerformed(ActionEvent e) {
				btnSend.doClick();
			}
		});
        
        roomTabbedPane.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				JScrollPane selectedTab = (JScrollPane) roomTabbedPane.getSelectedComponent();
				if (selectedTab != null) {
					RoomMessagesPanel selectedMessagePanel = (RoomMessagesPanel) selectedTab.getViewport().getView();
					chattingRoom = selectedMessagePanel.room.id;
					updateRoomUsersJList();
				}
			}
		});
        btnEmoji.addActionListener(this);
        btnFile.addActionListener(this);
        btnGroup.addActionListener(this);
        btnSend.addActionListener(this);
        jLabel5.setText("ServerName: " +SocketController.serverName( Main.socketController.connectedServer.ip,Main.socketController.connectedServer.port));
        jPanel1.setBorder(BorderFactory.createTitledBorder(String.format("UserName: %s", Main.connectServerScreen.userName)));
        roomUsersJList.setBorder(BorderFactory.createTitledBorder("User trong room hiện tại") );
        updateOnlineUserJList();
        roomMessagesPanels = new ArrayList<RoomMessagesPanel>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnGroup = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        btnEmoji = new javax.swing.JButton();
        btnFile = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        onlineUserScrollPane = new javax.swing.JScrollPane();
        onlineUserJList = new javax.swing.JList<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        roomTabbedPane = new javax.swing.JTabbedPane();
        groupListScrollPane = new javax.swing.JScrollPane();
        groupJList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomUsersJList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("IP:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Port:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Số user online:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Số User đang online");

        btnGroup.setText("Tạo Nhóm");
        btnGroup.setActionCommand("group");

        messageArea.setColumns(20);
        messageArea.setRows(5);
        jScrollPane2.setViewportView(messageArea);

        btnEmoji.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baitap14_chatroom_client/icon/happy(2).png"))); // NOI18N
        btnEmoji.setActionCommand("emoji");
        btnEmoji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmojiActionPerformed(evt);
            }
        });

        btnFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baitap14_chatroom_client/icon/folder(1).png"))); // NOI18N
        btnFile.setActionCommand("file");

        btnSend.setText("Send");
        btnSend.setActionCommand("send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        onlineUserScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineUserScrollPaneMouseClicked(evt);
            }
        });

        onlineUserJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineUserJListMouseClicked(evt);
            }
        });
        onlineUserScrollPane.setViewportView(onlineUserJList);

        groupJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupJListMouseClicked(evt);
            }
        });
        groupListScrollPane.setViewportView(groupJList);

        jScrollPane1.setViewportView(roomUsersJList);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Server: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                        .addComponent(onlineUserScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(groupListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEmoji, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSend)))
                    .addComponent(roomTabbedPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(44, 44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(onlineUserScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(groupListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addComponent(roomTabbedPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEmoji)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSend))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEmojiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmojiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEmojiActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSendActionPerformed

    private void onlineUserScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineUserScrollPaneMouseClicked

    }//GEN-LAST:event_onlineUserScrollPaneMouseClicked

    private void onlineUserJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineUserJListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {

					String clickedUser = onlineUserJList.getSelectedValue();
					System.out.println("Double click " + clickedUser);
					Room foundRoom = Room.findPrivateRoom(Main.socketController.allRooms, clickedUser);
					if (foundRoom == null) {
						Main.socketController.createPrivateRoom(clickedUser);
					} else {
						int roomTabIndex = -1;
						for (int i = 0; i < roomTabbedPane.getTabCount(); i++) {
							JScrollPane currentScrollPane = (JScrollPane) roomTabbedPane.getComponentAt(i);
							RoomMessagesPanel currentRoomMessagePanel = (RoomMessagesPanel) currentScrollPane
									.getViewport().getView();
							if (currentRoomMessagePanel.room.id == foundRoom.id) {
								roomTabIndex = i;
								break;
							}
						}

						if (roomTabIndex == -1) { // room tồn tại nhưng tab bị chéo trước đó
							newRoomTab(foundRoom);
							roomTabbedPane.setSelectedIndex(roomTabbedPane.getTabCount() - 1);
						} else {
							roomTabbedPane.setSelectedIndex(roomTabIndex);
						}
					}
				}
        
    }//GEN-LAST:event_onlineUserJListMouseClicked

    private void groupJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupJListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {

					String clickedGroup = groupJList.getSelectedValue();
					System.out.println("Double click " + clickedGroup);
					Room foundRoom = Room.findGroup(Main.socketController.allRooms, clickedGroup);

					int roomTabIndex = -1;
					for (int i = 0; i < roomTabbedPane.getTabCount(); i++) {
						JScrollPane currentScrollPane = (JScrollPane) roomTabbedPane.getComponentAt(i);
						RoomMessagesPanel currentRoomMessagePanel = (RoomMessagesPanel) currentScrollPane.getViewport()
								.getView();
						if (currentRoomMessagePanel.room.id == foundRoom.id) {
							roomTabIndex = i;
							break;
						}
					}

					if (roomTabIndex == -1) { // room tồn tại nhưng tab bị chéo trước đó
						newRoomTab(foundRoom);
						roomTabbedPane.setSelectedIndex(roomTabbedPane.getTabCount() - 1);
					} else {
						roomTabbedPane.setSelectedIndex(roomTabIndex);
					}
				}
    }//GEN-LAST:event_groupJListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chatfrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chatfrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chatfrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chatfrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chatfrm().setVisible(true);
            }
        });
    }
    
     public void newRoomTab(Room room) {
		RoomMessagesPanel roomMessagesPanel = new RoomMessagesPanel(room);
                
                
		roomMessagesPanels.add(roomMessagesPanel);

		for (MessageData messageData : room.messages)
                {
                    try{
//                        String a = messageData.content;
//                        String decryptedMessage = CryptoUtils.decrypt(a, key); 
//                        messageData.setContent(decryptedMessage);
                        addNewMessageGUI(room.id, messageData);
                        
                     }catch(Exception e){
                         e.printStackTrace();
                     }
                    
                }	

		JScrollPane messagesScrollPane = new JScrollPane(roomMessagesPanel);
		messagesScrollPane.setMinimumSize(new Dimension(50, 100));
		messagesScrollPane.getViewport().setBackground(Color.white);

		roomTabbedPane.addTab(room.name, messagesScrollPane);
		roomTabbedPane.setTabComponentAt(roomTabbedPane.getTabCount() - 1,
				new TabComponent(room.name, new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						roomMessagesPanels.remove(roomMessagesPanel);
						roomTabbedPane.remove(messagesScrollPane);
					}
				}));
                
	}

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
		case "group": {
			JDialog chooseUserDialog = new JDialog();
			JPanel chooseUserContent = new JPanel(new GridBagLayout());
			GBCBuilder gbc = new GBCBuilder(1, 1);

			JList<String> onlineUserJList = new JList<String>(Main.socketController.onlineUsers.toArray(new String[0]));
			JScrollPane onlineUserScrollPanel = new JScrollPane(onlineUserJList);
			onlineUserScrollPanel.setBorder(BorderFactory.createTitledBorder("Chọn user để thêm vào nhóm"));

			JLabel groupNameLabel = new JLabel("Tên group: ");
			JTextField groupNameField = new JTextField();
			JButton createButton = new JButton("Tạo group");
			createButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					String groupName = groupNameField.getText();
					if (groupName.isEmpty()) {
						JOptionPane.showMessageDialog(chooseUserDialog, "Tên group không được trống", "Lỗi tạo group",
								JOptionPane.WARNING_MESSAGE);
						return;
					}
					List<String> chosenUsers = onlineUserJList.getSelectedValuesList();
					if (chosenUsers.size() < 2) {
						JOptionPane.showMessageDialog(chooseUserDialog,
								"Group phải có từ 3 người trở lên (chọn 2 người trở lên)", "Lỗi tạo group",
								JOptionPane.WARNING_MESSAGE);
						return;
					}
					Main.socketController.createGroup(groupName, chosenUsers);
					chooseUserDialog.setVisible(false);
					chooseUserDialog.dispose();
				}
			});

			chooseUserContent.add(onlineUserScrollPanel,
					gbc.setSpan(2, 1).setFill(GridBagConstraints.BOTH).setWeight(1, 0));
			chooseUserContent.add(groupNameLabel, gbc.setGrid(1, 2).setSpan(1, 1).setWeight(0, 0));
			chooseUserContent.add(groupNameField, gbc.setGrid(2, 2).setWeight(1, 0));
			chooseUserContent.add(createButton,
					gbc.setGrid(1, 3).setSpan(2, 1).setWeight(0, 0).setFill(GridBagConstraints.NONE));

			chooseUserDialog.setMinimumSize(new Dimension(300, 150));
			chooseUserDialog.setContentPane(chooseUserContent);
			chooseUserDialog.setTitle("Tạo group mới");
			chooseUserDialog.setModalityType(JDialog.DEFAULT_MODALITY_TYPE);
			chooseUserDialog.pack();
			chooseUserDialog.getRootPane().setDefaultButton(createButton);
			chooseUserDialog.setLocationRelativeTo(null);
			chooseUserDialog.setVisible(true);
                        updateGroupJList();
			break;
		}

		case "send": {
                    try {
			String content = messageArea.getText();
			if (content.isEmpty())
				break;
                            
                        
                        SecretKey key1 = KeyManager.getInstance().getKey();
                        
                        //Kiem tra khoa
//                            byte[] encodedKey = key1.getEncoded();
//
//                            // Mã hóa mảng byte thành chuỗi Base64
//                            String encodedKeyString = Base64.getEncoder().encodeToString(encodedKey);
//
//                            // In ra chuỗi Base64
//                            System.out.println("Encoded Key: " + encodedKeyString);

                            //Ma hoa tin nhan
                            String encryptedMessage = CryptoUtils.encrypt(content, key1);
                            System.out.println(encryptedMessage);
//                            
                            
                            
                            if (chattingRoom != -1)
                            {
                                Main.socketController.sendTextToRoom(chattingRoom, encryptedMessage);//Gui tin nhan da dc ma hoa
//                                Main.socketController.sendTextToRoom(chattingRoom, content);//Gui tin nhan chua duoc ma hoa
                            }       
                            messageArea.setText("");
                            break;
                        } catch (Exception ex) {
                            Logger.getLogger(Chatfrm.class.getName()).log(Level.SEVERE, null, ex);
                        }
		}

		case "emoji": {
			JDialog emojiDialog = new JDialog();
			Object[][] emojiMatrix = new Object[6][6];
			int emojiCode = 0x1F601;
			for (int i = 0; i < 6; i++) {
				for (int j = 0; j < 6; j++)
					emojiMatrix[i][j] = new String(Character.toChars(emojiCode++));
			}

			JTable emojiTable = new JTable();
			emojiTable.setModel(new DefaultTableModel(emojiMatrix, new String[] { "", "", "", "", "", "" }) {
				private static final long serialVersionUID = 1L;

				@Override
				public boolean isCellEditable(int row, int column) {
					return false;
				}
			});
			emojiTable.setFont(new Font("Dialog", Font.PLAIN, 20));
			emojiTable.setShowGrid(false);
			emojiTable.setIntercellSpacing(new Dimension(0, 0));
			emojiTable.setRowHeight(30);
			emojiTable.getTableHeader().setVisible(false);

			DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
			centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
			for (int i = 0; i < emojiTable.getColumnCount(); i++) {
				emojiTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
				emojiTable.getColumnModel().getColumn(i).setMaxWidth(30);
			}
			emojiTable.setCellSelectionEnabled(true);
			emojiTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			emojiTable.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent e) {
					messageArea.setText(messageArea.getText() + emojiTable
							.getValueAt(emojiTable.rowAtPoint(e.getPoint()), emojiTable.columnAtPoint(e.getPoint())));
				}
			});

			emojiDialog.setContentPane(emojiTable);
			emojiDialog.setTitle("Chọn emoji");
			emojiDialog.setModalityType(JDialog.DEFAULT_MODALITY_TYPE);
			emojiDialog.pack();
			emojiDialog.setLocationRelativeTo(this);
			emojiDialog.setVisible(true);
			break;
		}

		case "file": {
			if (chattingRoom == -1)
				break;
			JFileChooser jfc = new JFileChooser();
			jfc.setDialogTitle("Chọn file để gửi");
			int result = jfc.showDialog(null, "Chọn file");
			jfc.setVisible(true);

			if (result == JFileChooser.APPROVE_OPTION) {
				String fileName = jfc.getSelectedFile().getName();
				String filePath = jfc.getSelectedFile().getAbsolutePath();

				Main.socketController.sendFileToRoom(chattingRoom, fileName, filePath);
			}
		}
        }
    }
    
    public static class RoomMessagesPanel extends JPanel {
		private static final long serialVersionUID = 1L;
		public Room room;

		public RoomMessagesPanel(Room room) {
			this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
			this.setBackground(Color.white);
			this.room = room;
		}

		public static RoomMessagesPanel findRoomMessagesPanel(List<RoomMessagesPanel> roomMessagesPanelList, int id) {
			for (RoomMessagesPanel roomMessagesPanel : roomMessagesPanelList) {
				if (roomMessagesPanel.room.id == id)
					return roomMessagesPanel;
			}
			return null;
		}
	}

	public static class TabComponent extends JPanel {

		private static final long serialVersionUID = 1L;

		public TabComponent(String tabTitle, ActionListener closeButtonListener) {
			JLabel titleLabel = new JLabel(tabTitle);
			JButton closeButton = new JButton(UIManager.getIcon("InternalFrame.closeIcon"));
			closeButton.addActionListener(closeButtonListener);
			closeButton.setPreferredSize(new Dimension(16, 16));

			this.setLayout(new FlowLayout());
			this.add(titleLabel);
			this.add(closeButton);
			this.setOpaque(false);
		}
                }
        
        public void updateServerData() {
		Main.socketController.connectedServer.connectAccountCount = Main.socketController.onlineUsers.size();
//		connectedServerInfoJList.setListData(new String[] { "IP: " + Main.socketController.connectedServer.ip,
//				"Port: " + Main.socketController.connectedServer.port,
//				"Số user online: " + Main.socketController.connectedServer.connectAccountCount });
                jLabel1.setText("IP: " + Main.socketController.connectedServer.ip);
                jLabel2.setText("Port: " +Main.socketController.connectedServer.port );
                jLabel3.setText("Số user online: "+ Main.socketController.connectedServer.connectAccountCount); 
	}
        public void updateOnlineUserJList(){
            onlineUserJList.setListData(Main.socketController.onlineUsers.toArray(new String[0]));
        }
        public void updateRoomUsersJList() {
		System.out.println("updateRoomUsersJList");
		Room theChattingRoom = Room.findRoom(Main.socketController.allRooms, chattingRoom);
		if (theChattingRoom != null)
			roomUsersJList.setListData(theChattingRoom.users.toArray(new String[0]));
	}

	public void updateGroupJList() {
		List<String> groupList = new ArrayList<String>();
		for (Room room : Main.socketController.allRooms) {
			if (room.type.equals("group"))
				groupList.add(room.name);
		}
		groupJList.setListData(groupList.toArray(new String[0]));
	}

	// ************** ROOM MESSAGES ***************
	public void addNewMessage(int roomID, String type, String whoSend, String content) {
                String decryptMessage;
                try {
                        //decryptMessage = CryptoUtils.decrypt(content, key);
                        System.out.println("AddNewMessage: " + content);
                        MessageData messageData = new MessageData(whoSend, type, content);
                        Room receiveMessageRoom = Room.findRoom(Main.socketController.allRooms, roomID);
                        receiveMessageRoom.messages.add(messageData);
                        addNewMessageGUI(roomID, messageData);
                } catch (Exception ex) {
                    Logger.getLogger(Chatfrm.class.getName()).log(Level.SEVERE, null, ex);
                }
		
	}
        private void addNewMessageGUI(int roomID, MessageData messageData) {

		MessagePanel newMessagePanel = new MessagePanel(messageData);
		newMessagePanel.setAlignmentX(Component.LEFT_ALIGNMENT);

		RoomMessagesPanel receiveMessageRoomMessagesPanel = RoomMessagesPanel.findRoomMessagesPanel(roomMessagesPanels,
				roomID);
		receiveMessageRoomMessagesPanel.add(Box.createHorizontalGlue());
		receiveMessageRoomMessagesPanel.add(newMessagePanel);
		receiveMessageRoomMessagesPanel.validate();
		receiveMessageRoomMessagesPanel.repaint();
		roomTabbedPane.validate();
		roomTabbedPane.repaint();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmoji;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnGroup;
    private javax.swing.JButton btnSend;
    private javax.swing.JList<String> groupJList;
    private javax.swing.JScrollPane groupListScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JList<String> onlineUserJList;
    private javax.swing.JScrollPane onlineUserScrollPane;
    private javax.swing.JTabbedPane roomTabbedPane;
    private javax.swing.JList<String> roomUsersJList;
    // End of variables declaration//GEN-END:variables

  
   

	
}

